def sdot(x: array[float], y: array[float], n : int) -> float {
    var float accum = 0.0;
    var int i = 0;

    for i in range(n) {
        accum = accum + x[i]*y[i];
    }
    return accum;
}

# %ndarray_double = type { double*, i32, i32* }
# %ndarray_double.0 = type { double*, i32, i32* }
# 
# define void @__module() nounwind readnone {
# entry:
#   ret void
# }
# 
# define double @sdot(%ndarray_double* nocapture, %ndarray_double.0* nocapture, i32) nounwind readonly {
# entry:
#   %x_data = getelementptr %ndarray_double* %0, i32 0, i32 0
#   %3 = load double** %x_data
#   %y_data = getelementptr %ndarray_double.0* %1, i32 0, i32 0
#   %4 = load double** %y_data
#   %5 = icmp sgt i32 %2, 0
#   br i1 %5, label %for.body, label %for.end
# 
# for.body:                                         ; preds = %entry, %for.body
#   %i1.03 = phi i32 [ %10, %for.body ], [ 0, %entry ]
#   %accum.02 = phi double [ %f5, %for.body ], [ 0.000000e+00, %entry ]
#   %6 = getelementptr double* %3, i32 %i1.03
#   %7 = load double* %6
#   %8 = getelementptr double* %4, i32 %i1.03
#   %9 = load double* %8
#   %f4 = fmul double %7, %9
#   %f5 = fadd double %accum.02, %f4
#   %10 = add i32 %i1.03, 1
#   %exitcond = icmp eq i32 %10, %2
#   br i1 %exitcond, label %for.end, label %for.body
# 
# for.end:                                          ; preds = %for.body, %entry
#   %accum.0.lcssa = phi double [ 0.000000e+00, %entry ], [ %f5, %for.body ]
#   ret double %accum.0.lcssa
# }
